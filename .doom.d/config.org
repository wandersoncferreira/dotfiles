#+TITLE: Emacs configuration
#+AUTHOR: Wanderson Ferreira
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall

#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

* Summary :TOC_2_gh:
- [[#appearance][Appearance]]
- [[#window][Window]]
  - [[#moving][Moving]]
  - [[#better-split][Better split]]
- [[#programming-languages][Programming Languages]]
  - [[#emacs-lisp][Emacs Lisp]]
- [[#macos-specifics][MacOS specifics]]
  - [[#search-in-homebrew][Search in Homebrew]]
- [[#apps][Apps]]
  - [[#gif][Gif]]
  - [[#plantuml][PlantUML]]
  - [[#keyfreq][Keyfreq]]
  - [[#vlf][VLF]]

* Appearance

Doom comes with some nice themes. For now, I've been using Zenburn most of the
time.

#+begin_src emacs-lisp
(setq doom-theme 'doom-zenburn)
#+end_src

* Window

** Moving

Use shift arrows to move between windows.
#+begin_src emacs-lisp
(windmove-default-keybindings)
#+end_src

However, Org mode requires a little workaround to make shift arrow movements to
work.
#+begin_src emacs-lisp
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src

** Better split

When you split the buffer in any direction, move the cursor there and show the
previous buffer.
#+begin_src emacs-lisp
(defun bk/vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun bk/hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+end_src

Overwrite the default split bindings
#+begin_src emacs-lisp
(map! "C-x 2" #'bk/vsplit-last-buffer
      "C-x 3" #'bk/hsplit-last-buffer)
#+end_src

* Programming Languages

** Emacs Lisp

*** Appearance

I don't like the too colorful buffers. So, removing the rainbow delimiter mode.
#+begin_src emacs-lisp
(after! elisp-mode
  (remove-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Taming Parenthesis

You will definitely hate Lisp if you don't understand structural editing.
#+begin_src emacs-lisp
(use-package! paredit
  :config
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode))
#+end_src

*** Test frameworks

Buttercup (Behavior Driven Emacs Lisp Testing) framework has one annoyance when
you run the test suite: it moves the cursor from the point to the end of the
test file. This =advice= is a workaround to keep the point where it was:
#+begin_src emacs-lisp
(use-package! buttercup
  :config
  (define-advice buttercup--run-suites (:around (orig-fun &rest args))
    "Keep the cursor at-point after running test suite with buttercup."
    (setq save-point (point))
    (unwind-protect
        (apply orig-fun args)
      (goto-char save-point))))
#+end_src

* MacOS specifics

I prefer to change Command to =meta=.

#+begin_src emacs-lisp
(when IS-MAC
  (setq mac-command-modifier 'meta
        mac-option-modifier '(:ordinary super :button 2)))
#+end_src


** Search in Homebrew

Sometimes I need to verify if a package is available in homebrew or not. Making
the query from Emacs has been useful.

#+begin_src emacs-lisp
(defun bk/brew-search ()
  "Search homebrew for a file to be installed."
  (interactive "")
  (let* ((query (read-string "Search in Homebrew: "))
         (res (shell-command-to-string
               (format "brew search %s" query)))
         (res-list (-> res
                       (split-string "==> Formulae")
                       (-second-item)
                       (string-trim)
                       (split-string "\n")))
         (to-be-installed
          (completing-read
           "Install one of the packages: "
           res-list)))
    (when (not (string-empty-p to-be-installed))
      (async-shell-command
       (format "brew install %s" to-be-installed)))))
#+end_src

* Apps

I'm not sure how to classify something as an "app" inside Emacs. Perhaps they
are heavily dependent of external tools?

To be honest, most things in this section are here because I don't know a better
place to put it.

** Gif

I need to show off some Emacs work or feature and be able to record a small GIF
in seconds is perfect. During the development of my Emacs packages I've been
recording GIFs to reproduce feature behaviors to new users a lot.

#+begin_src emacs-lisp
(use-package! gif-screencast
  :config
  (setq gif-screencast-args '("-x")
        gif-screencast-cropping-program "mogrify"
        gif-screencast-capture-format "ppm"))
#+end_src


** PlantUML

Drawing diagrams to put some form to your system design ideas? Yeap!

#+begin_src emacs-lisp
(use-package! plantuml-mode
  :config
  (setq plantuml-jar-path "~/dotfiles/plantuml.jar"))
#+end_src


** Keyfreq

Important to monitor your key usage in order to improve your editing skills in
the long run. More tips [[https://github.com/wandersoncferreira/vim-mindset-apply-emacs#general-tips][here]].

#+begin_src emacs-lisp
(use-package! keyfreq
  :init
  (setq keyfreq-excluded-commands
        '(self-insert-command))
  :config
  (keyfreq-mode +1)
  (keyfreq-autosave-mode +1))
#+end_src


** VLF

Help opening very large files.

#+begin_src emacs-lisp
(use-package! vlf
  :config
  (require 'vlf-setup)
  (custom-set-variables
   '(vlf-application 'dont-ask)))
#+end_src
