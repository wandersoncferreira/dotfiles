#+TITLE: Emacs Daily configuration


I need to use Emacs on my daily work. I am a professional programmer
that needs to deliver quality software to clients. Based on that I
need to impose some constraints to this project:

- I need it to be *FAST!!*
- languages supported
  - Clojure
  - Typescript
  - Javascript
- Feature rich:
  - Auto completion
  - Code navigation
  - Spelling
  - Refactoring capabilities
  - Utilities
    - Git
    - Docker
- I don't care about *your* setup, sorry. Happy to answer questions
- Consistent key mappings on different programming languages


Ok, let's keep track of each of these categories.


* Next steps [17/17]
  - [X] Create more custom keymaps for common operations on Clojure-LSP
    #+begin_src elisp
      (define-key lsp-command-map (kbd "ra") 'lsp-clojure-add-missing-libspec)
    #+end_src

  - [X] Read [[https://clojure-lsp.github.io/clojure-lsp/][Clojure LSP webpage to learn more about the project's feature]]
    - =lsp-format-buffer= is very useful
    - Not sure if I want Code lenses, but I will try for a while. [2021/02/27]
      - Nah! Just disable it some days ago.. too noisy! [2021/03/02]
    - Signature help is very useful
    - Call hierarchy also very nice e.g. =C-c l g h=
  - [X] Make IDO do not recommend files on other directories while I am creating new ones
  - [X] Change =kaocha-runner=:
    - Add keybindings to most useful commands
    - Open =*kaocha-output*= into its own *frame*
    - [2021/03/04] code at --> =lisps/patch-kaocha-runner.el=
  - [X] Learn more about [[https://github.com/magit/forge][forge]]. I currently open PR to github from Emacs which is great.
    - ='= is a prefix command available inside any Magit buffer to access forge
    - =forge-list-requested-reviews= is a very handy command, deserves its own keybinding
    - We can checkout to a PR using =b y= from Magit buffer which is great to start code reviews
  - [X] Add better support for Spell checking in English
  - [X] Better setup for =uniquify= so I can find buffers more easily
  - [X] Create nice utilities using  =git worktree=, required workflow: (=bk/create-worktree=, =bk/delete-worktree=)
    - Ask for branch
    - Use branch name to create dir in parent directory
    - Open projectile-find-files in new parent directory
    - Command to remove worktree when desired and delete folder
  - [X] Improve Org mode to use custom templates for code blocks
  - [X] Get images from the web and paste directly into Org-mode (org-download)
  - [X] Make org-mode play nice with Shift-<arrows> movements
  - [X] Create function on emacs to produce UUID (=bk/uuid=)
  - [X] Setup docker
  - [X] Learn more about refactoring using lsp-mode and refactor.el
  - [X] Run over typescript setup and cleanup eventual problems. I moved to =tide= instead of =lsp-mode=
  - [X] Setup to open GPG encrypted file easily
  - [X] Make =clj-refactor= and =clojure-lsp= play nice together and consistent. Prefer =clj-refactor=
